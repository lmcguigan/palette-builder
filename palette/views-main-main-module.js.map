{"version":3,"sources":["./src/app/services/colors.service.ts","./src/app/utils/gradient-utils.ts","./src/app/views/main/main.module.ts","./src/app/views/main/main.component.ts","./src/app/views/main/main.component.html","./src/app/interfaces/colors.ts","./src/app/views/main/main-routing.module.ts"],"names":[],"mappings":"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","file":"views-main-main-module.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { IColor } from '../interfaces/colors';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ColorsService {\n  colors$ = new BehaviorSubject<IColor[]>([])\n  colorsAdded$ = new BehaviorSubject<number>(1)\n  constructor() { }\n  getColorsCopy() {\n    return [...this.colors$.getValue()];\n  }\n  add(newColor: IColor){\n    this.colors$.next([...this.getColorsCopy(), newColor])\n    const inc = this.colorsAdded$.getValue() + 1\n    this.colorsAdded$.next(inc);\n  }\n  remove(index: number){\n    const newArray = [...this.colors$.getValue()]\n    newArray.splice(index, 1);\n    this.colors$.next(newArray);\n  }\n  edit(index: number, result: IColor){\n    this.colors$.next(this.getColorsCopy().map((e, i) => i === index ? result : e));\n  }\n  clear(){\n    this.colors$.next([]);\n    this.colorsAdded$.next(1);\n  }\n  getColorAtIndex(index): IColor{\n    return this.colors$.getValue()[index]\n  }\n}\n","import { ISliderControl, RGBSliderControlNameType, SliderControlNameType } from \"../interfaces/colors\";\nimport { getValueFromControls } from \"./convert-color-utils\";\n\nexport function getGradientForRgb(name: RGBSliderControlNameType, red: number, green: number, blue: number): string{\n    switch (name){\n        case 'red':\n            return `rgb(${0}, ${green}, ${blue}), rgb(${255}, ${green}, ${blue})`\n        case 'green':\n            return `rgb(${red}, ${0}, ${blue}), rgb(${red}, ${255}, ${blue})`\n        case 'blue': \n            return `rgb(${red}, ${green}, ${0}), rgb(${red}, ${green}, ${255})`\n    }\n}\n\nexport function buildGradient(name: SliderControlNameType, sliderControls: ISliderControl[]) {\n    let gradientColors = ''\n    if(name === 'hue' || name === 'saturation' || name === 'lightness'){\n      if(name === 'hue'){\n        gradientColors = `#ff0000 0%, #ffff00 17%, #00ff00 33%, #00ffff 50%, #0000ff 67%, #ff00ff 83%, #ff0000 100%`\n      } else {\n        const other = sliderControls.find((con) => con.name !== name && con.name !== 'hue').currentValue\n        const hue = getValueFromControls('hue', sliderControls)\n        if(name === 'saturation'){\n            gradientColors = `hsl(${hue}, ${0}%, ${other}%), hsl(${hue}, ${100}%, ${other}%)`\n        }\n        else {\n            gradientColors = `hsl(${hue}, ${other}%, ${0}%), hsl(${hue}, ${other}%, ${50}%), hsl(${hue}, ${other}%, ${100}%)`\n        } \n      }\n    } else {\n        const red = getValueFromControls('red', sliderControls)\n        const green = getValueFromControls('green', sliderControls)\n        const blue = getValueFromControls('blue', sliderControls)\n        gradientColors = getGradientForRgb(name, red, green, blue)\n    }\n    return `linear-gradient(to right, ${gradientColors})`\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MainRoutingModule } from './main-routing.module';\nimport { MainComponent } from './main.component';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatInputModule } from '@angular/material/input';\nimport {MatIconModule} from '@angular/material/icon'\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport {MatCardModule} from '@angular/material/card'\nimport {MatListModule} from '@angular/material/list'\nimport {MatSelectModule} from '@angular/material/select'\nimport { FormsModule } from '@angular/forms';\nimport { PaletteService } from 'src/app/services/palette.service';\n\n\n@NgModule({\n  declarations: [MainComponent],\n  imports: [\n    CommonModule,\n    MainRoutingModule,\n    MatSliderModule,\n    MatButtonModule,\n    MatInputModule,\n    MatIconModule,\n    MatFormFieldModule,\n    MatCardModule,\n    MatListModule,\n    MatSelectModule,\n    FormsModule,\n  ],\n  providers: [PaletteService]\n})\nexport class MainModule { }\n","import { Component, OnInit, ViewEncapsulation, OnDestroy } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { ColorEditDialogComponent } from '../../components/color-edit-dialog/color-edit-dialog.component';\nimport { JsonDialogComponent } from '../../components/json-dialog/json-dialog.component';\nimport { IColor, ISliderControl, colorMode, colorModes, SliderControlNameType } from '../../interfaces/colors'\nimport { IFirestoreColor } from '../../interfaces/firestore'\nimport { getHex, getColorString, convertHex } from '../../utils/convert-color-utils';\nimport { Router } from '@angular/router';\nimport { ColorsService } from 'src/app/services/colors.service';\nimport { Subject } from 'rxjs';\nimport { buildGradient } from 'src/app/utils/gradient-utils';\nimport { PaletteService } from 'src/app/services/palette.service';\n\n@Component({\n  selector: 'app-main',\n  templateUrl: './main.component.html',\n  styleUrls: ['./main.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\n\nexport class MainComponent implements OnInit, OnDestroy {\n  colorName: string = 'Color1'\n  paletteName: string = 'My new palette'\n  colorMode: colorMode = 'HSL'\n  sliderControls: ISliderControl[] = [...colorModes[1].sliderControls]\n  currentColorString: string = 'hsl(0, 0%, 0%)';\n  currentColorHex: string = \"#000000\"\n  colorCount: number = 1\n  usedColorNames: string[];\n  usedColorHexs: string[];\n  onDestroy$: Subject<boolean> = new Subject<boolean>();\n  constructor(\n    public dialog: MatDialog,\n    public router: Router,\n    public colorService: ColorsService,\n    private paletteService: PaletteService,\n    private snackbar: MatSnackBar,\n  ) { }\n\n  ngOnInit(): void {\n    this.updateColorString();\n    this.colorService.colors$.subscribe((value) => {\n      this.usedColorNames = value.map((e) => e.name);\n      this.usedColorHexs = value.map((e) => e.hex);\n      this.colorCount = value.length + 1;\n      this.colorName = `Color${this.colorCount}`\n    });\n  }\n  ngOnDestroy(): void {\n    this.onDestroy$.next(true);\n  }\n  updateColorString(){\n    const controlValues = this.sliderControls.map((cont) => cont.currentValue) as [number, number, number]\n    this.currentColorString = getColorString(this.colorMode, this.sliderControls);\n    this.currentColorHex = getHex(controlValues, this.colorMode);\n  }\n  onSliderChanged(){\n    this.updateColorString();\n  }\n  getBg(name: SliderControlNameType){\n    return buildGradient(name, this.sliderControls)\n  }\n  onAdd(){\n    // TODO: Move this to a util\n    const controls = this.sliderControls.map((obj) => Object.assign({}, obj))\n    const newColor: IColor = {\n      name: this.colorName, \n      color: this.currentColorString,\n      editMode: this.colorMode,\n      hex: this.currentColorHex,\n      controls: controls,\n    }\n    this.colorService.add(newColor);\n  }\n  onRemoveColor(index: number){\n    this.colorService.remove(index);\n  }\n  onEditColor(index: number){\n    const dialogRef = this.dialog.open(ColorEditDialogComponent, {\n      data: { selectedColor: this.colorService.getColorAtIndex(index) }\n    });\n\n    dialogRef.afterClosed().subscribe((result: IColor)=> {\n      if(result){\n        this.colorService.edit(index, result);\n      }\n    });\n  }\n  onColorModeChanged(e: colorMode){\n    this.colorMode = e;\n    this.sliderControls = convertHex(this.currentColorHex, e);\n    this.updateColorString();\n  }\n  onGetJson(){\n    this.dialog.open(JsonDialogComponent, { data: { colors: this.colorService.colors$.getValue() } });\n  }\n  onSavePalette(){\n    // TODO: Move this to a util\n    const firebaseColors: IFirestoreColor[] = this.colorService.colors$.getValue().map((color) => \n    {    \n      return {\n      color: color.color,\n      hex: color.hex,\n      mode: color.editMode,\n      name: color.name,\n      }\n    }) \n    this.paletteService.addPalette(this.paletteName, firebaseColors).then(() => {\n      this.snackbar.open('Palette saved successfully!', undefined, {duration: 5000})\n      this.colorService.clear()\n    }).catch((err) => {\n      // TODO - show error modal\n      console.log('Error saving palette', err)\n    })\n  }\n  goToPreview(){\n    this.router.navigate(['/preview'])\n  }\n}\n","<div class=\"outer-container\">\n    <div class=\"container\">\n        <div class=\"picker-row\">\n            <div class=\"color-preview\" [style.background-color]=\"currentColorHex\"></div>\n            <div class=\"slider-holder\">\n                <mat-form-field appearance=\"fill\">\n                    <mat-label>Select color mode</mat-label>\n                    <mat-select [ngModel]=\"colorMode\" (ngModelChange)=\"onColorModeChanged($event)\">\n                    <mat-option value=\"RGB\">RGB</mat-option>\n                    <mat-option value=\"HSL\">HSL</mat-option>\n                    </mat-select>\n                </mat-form-field>\n                <div>\n                    <div *ngFor=\"let control of sliderControls\" class=\"sliders-cont\">\n                        <p class=\"control-name\">{{control.name}}</p>\n                        <div class=\"slider-outer\">\n                            <input type=\"range\" [ngClass]=\"'slider ' + control.name\" [ngStyle]=\"{'background': getBg(control.name)}\" [(ngModel)]=\"control.currentValue\" (ngModelChange)=\"onSliderChanged()\" min=\"0\" [max]=\"control.max\"/>\n                            <span class=\"value-label\">{{control.currentValue}}</span>\n                        </div>\n                    </div>\n                </div>\n                <mat-form-field appearance=\"fill\">\n                    <mat-label>Name your color</mat-label>\n                    <input matInput type=\"text\" [(ngModel)]=\"colorName\">\n                    <button mat-button *ngIf=\"colorName\" matSuffix mat-icon-button aria-label=\"Clear\" (click)=\"colorName=''\">\n                    <mat-icon>close</mat-icon>\n                    </button>\n                </mat-form-field>\n                <button mat-raised-button color=\"primary\" [disabled]=\"usedColorNames.includes(colorName) || usedColorHexs.includes(currentColorHex)\" (click)=\"onAdd()\">Add to Palette</button>\n            </div>\n        </div>\n    </div>\n    <div class=\"palette-container\">\n        <mat-card class=\"palette-card\">\n            <div>\n                <h3>Palette Preview</h3>\n                <mat-form-field appearance=\"fill\">\n                    <mat-label>Name your palette</mat-label>\n                    <input matInput type=\"text\" [(ngModel)]=\"paletteName\">\n                    <button mat-button *ngIf=\"paletteName\" matSuffix mat-icon-button aria-label=\"Clear\" (click)=\"paletteName=''\">\n                    <mat-icon>close</mat-icon>\n                    </button>\n                </mat-form-field>\n                <p *ngIf=\"(colorService.colors$ | async).length === 0\">Colors that you add will appear here.</p>\n            </div>\n            <mat-card-content>\n            <mat-list>\n                <mat-list-item *ngFor=\"let color of (colorService.colors$ | async); let index = index; last as last\">\n                    <div class=\"prev-section color-prev-section\">\n                        <div class=\"color-preview\" [style.background-color]=\"color.color\"></div>\n                        <div>\n                            <h4 class=\"palette-color-line\" mat-line>{{color.name}}</h4>\n                            <p class=\"palette-color-line\" mat-line>{{color.color}}</p>\n                            <p class=\"palette-color-line\" mat-line>{{color.hex}}</p>\n                        </div>\n                    </div>\n                    <div class=\"prev-section button-section\">\n                        <button mat-stroked-button (click)=\"onEditColor(index)\" color=\"primary\" class=\"edit-button\">\n                            Edit<mat-icon>edit</mat-icon>\n                        </button>\n                        <button mat-stroked-button (click)=\"onRemoveColor(index)\" color=\"warn\">\n                            Delete<mat-icon>delete</mat-icon>\n                        </button>\n                    </div>\n                    <mat-divider class=\"margin-divider\" [inset]=\"true\" *ngIf=\"!last && (colorService.colors$ | async).length > 0\"></mat-divider>\n                </mat-list-item>\n            </mat-list>\n            </mat-card-content>\n            <mat-card-actions align=\"end\">\n            <button mat-raised-button color=\"primary\" (click)=\"onSavePalette()\" [disabled]=\"(colorService.colors$ | async).length === 0\">Save this palette</button>\n            <button mat-raised-button color=\"accent\" (click)=\"onGetJson()\" [disabled]=\"(colorService.colors$ | async).length === 0\">Get JSON</button>\n            <!-- <button mat-button (click)=\"goToPreview()\">Preview</button> -->\n            </mat-card-actions>\n        </mat-card>\n    </div>\n</div>\n","export type RGBSliderControlNameType = 'red' | 'green' | 'blue'\nexport type HSLSliderControlNameType = 'hue' | 'saturation' | 'lightness'\nexport type SliderControlNameType = RGBSliderControlNameType | HSLSliderControlNameType\nexport interface ISliderControl {\n  name: string,\n  max: number,\n  currentValue: number\n}\n\nexport interface IColor {\n  name: string\n  color: string\n  editMode: colorMode\n  hex?: string\n  controls?: ISliderControl[]\n}\n\nexport const colorModes = [\n  {\n  mode: 'RGB',\n  sliderControls: [\n    {\n      name:'red',\n      max: 255,\n      currentValue: 0,\n    }, \n    {\n      name: 'green',\n      max: 255,\n      currentValue: 0,\n    }, \n    {\n      name:'blue',\n      max: 255,\n      currentValue: 0,\n    }]\n  }, \n  {\n    mode: 'HSL',\n    sliderControls: [\n      {\n        name: 'hue',\n        max: 359,\n        currentValue: 0,\n      }, \n      { \n        name: 'saturation',\n        max: 100,\n        currentValue: 0,\n      }, \n      { \n        name: 'lightness',\n        max: 100,\n        currentValue: 0,\n      }\n    ]\n  }\n]\n\nexport type colorMode = 'HSL' | 'RGB'","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { MainComponent } from './main.component';\n\nconst routes: Routes = [{ path: '', component: MainComponent }];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class MainRoutingModule { }\n"],"sourceRoot":"webpack:///"}